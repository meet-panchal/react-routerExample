{"version":3,"sources":["components/DisplayList.jsx","components/EditForm.jsx","App.js","serviceWorker.js","index.js"],"names":["DisplayList","this","props","posts","map","post","key","id","title","to","className","onClick","Component","EditForm","state","currentPost","loading","changeHandler","event","setState","target","value","axios","get","match","params","then","res","data","role","style","margin","cols","rows","onChange","submit","withRouter","App","clickHandler","submitHandler","updatedState","slice","curPost","history","push","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIqBA,E,iLACT,IAAD,OACP,OACE,6BACE,4BACGC,KAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OACxB,yBAAKC,IAAKD,EAAKE,IACb,4BAAKF,EAAKG,OACV,kBAAC,IAAD,CACEC,GAAE,gBAAWJ,EAAKE,IAClBG,UAAU,kBACVC,QAAS,kBAAM,EAAKT,MAAMS,QAAQN,KAHpC,uB,GAR2BO,aCAnCC,E,2MACJC,MAAQ,CACNC,YAAa,GACbC,SAAS,G,EAaXC,cAAgB,SAAAC,GACd,EAAKC,SAAL,eACK,EAAKL,MADV,CAEEC,YAAY,eAAM,EAAKD,MAAMC,YAAlB,CAA+BP,MAAOU,EAAME,OAAOC,Y,mFAd7C,IAAD,OAClBC,IACGC,IADH,qDAEkDtB,KAAKC,MAAMsB,MAAMC,OAAOlB,KAEvEmB,MAAK,SAAAC,GACJ,IAAMtB,EAAOsB,EAAIC,KACjB,EAAKT,SAAS,CAAEJ,YAAaV,EAAMW,SAAS,S,+BAWxC,IAAD,OACP,OAAOf,KAAKa,MAAME,QAChB,yBACEN,UAAU,8BACVmB,KAAK,SACLC,MAAO,CAAEC,OAAQ,wBAEjB,0BAAMrB,UAAU,WAAhB,eAGF,6BACE,8BACEsB,KAAK,KACLC,KAAK,IACLZ,MAAOpB,KAAKa,MAAMC,YAAYP,MAC9B0B,SAAUjC,KAAKgB,gBAEjB,6BACA,4BACEP,UAAU,kBACVC,QAAS,kBAAM,EAAKT,MAAMiC,OAAO,EAAKrB,MAAMC,eAF9C,e,GAzCeH,aAmDRwB,cAAWvB,GChDpBwB,E,2MACJvB,MAAQ,CACNX,MAAO,GACPY,YAAa,I,EAQfuB,aAAe,SAAAjC,GACb,EAAKc,SAAL,eACK,EAAKL,MADV,CAEEC,YAAaV,M,EAIjBkC,cAAgB,SAAAlC,GACd,IAAImC,EAAe,EAAK1B,MAAMX,MAAMsC,QACpC,EAAKtB,SAAL,eACK,EAAKL,MADV,CAEEX,MAAOqC,EAAapC,KAAI,SAAAsC,GAAO,OAC7BA,EAAQnC,KAAOF,EAAKE,GAAKF,EAAOqC,QAGpC,EAAKxC,MAAMyC,QAAQC,KAAK,M,mFArBL,IAAD,OAClBtB,IAAMC,IAAN,8CAAwDG,MAAK,SAAAC,GAC3D,IAAMxB,EAAQwB,EAAIC,KAClB,EAAKT,SAAS,CAAEhB,MAAOA,S,+BAqBjB,IAAD,OACP,OACE,yBAAKO,UAAU,OACb,kBAAC,IAAD,CACEmC,KAAK,IACLC,OAAK,EACLC,UAAW,kBACT,kBAAC,EAAD,CAAa5C,MAAO,EAAKW,MAAMX,MAAOQ,QAAS,EAAK2B,kBAGxD,kBAAC,IAAD,CACEO,KAAK,YACLC,OAAK,EACLC,UAAW,kBACT,kBAAC,EAAD,CACE1C,KAAM,EAAKS,MAAMC,YACjBoB,OAAQ,EAAKI,wB,GA7CT3B,aAsDHwB,cAAWC,GCjDNW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DCVN4B,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.70b70292.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./DisplayList.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default class DisplayList extends Component {\n  render() {\n    return (\n      <div>\n        <ol>\n          {this.props.posts.map(post => (\n            <div key={post.id}>\n              <li>{post.title}</li>\n              <Link\n                to={`/edit/${post.id}`}\n                className=\"btn btn-success\"\n                onClick={() => this.props.onClick(post)}\n              >\n                Click ME!\n              </Link>\n            </div>\n          ))}\n        </ol>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\n\nclass EditForm extends Component {\n  state = {\n    currentPost: {},\n    loading: true\n  };\n  componentDidMount() {\n    axios\n      .get(\n        `https://jsonplaceholder.typicode.com/posts/${this.props.match.params.id}`\n      )\n      .then(res => {\n        const post = res.data;\n        this.setState({ currentPost: post, loading: false });\n      });\n  }\n\n  changeHandler = event => {\n    this.setState({\n      ...this.state,\n      currentPost: { ...this.state.currentPost, title: event.target.value }\n    });\n  };\n\n  render() {\n    return this.state.loading ? (\n      <div\n        className=\"spinner-border text-warning\"\n        role=\"status\"\n        style={{ margin: \" 75px 0px 0px 120px\" }}\n      >\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    ) : (\n      <div>\n        <textarea\n          cols=\"30\"\n          rows=\"5\"\n          value={this.state.currentPost.title}\n          onChange={this.changeHandler}\n        />\n        <br />\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => this.props.submit(this.state.currentPost)}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\nexport default withRouter(EditForm);\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n// import \"./App.css\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport DisplayList from \"./components/DisplayList\";\nimport EditForm from \"./components/EditForm\";\n\nclass App extends Component {\n  state = {\n    posts: [],\n    currentPost: {}\n  };\n  componentDidMount() {\n    axios.get(`https://jsonplaceholder.typicode.com/posts`).then(res => {\n      const posts = res.data;\n      this.setState({ posts: posts });\n    });\n  }\n  clickHandler = post => {\n    this.setState({\n      ...this.state,\n      currentPost: post\n    });\n  };\n\n  submitHandler = post => {\n    let updatedState = this.state.posts.slice();\n    this.setState({\n      ...this.state,\n      posts: updatedState.map(curPost =>\n        curPost.id === post.id ? post : curPost\n      )\n    });\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Route\n          path=\"/\"\n          exact\n          component={() => (\n            <DisplayList posts={this.state.posts} onClick={this.clickHandler} />\n          )}\n        />\n        <Route\n          path=\"/edit/:id\"\n          exact\n          component={() => (\n            <EditForm\n              post={this.state.currentPost}\n              submit={this.submitHandler}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}